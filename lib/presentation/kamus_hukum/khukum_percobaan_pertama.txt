import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:jdih_bumn/bloc/stage/get_kamus_hukum/get_kamus_hukum_bloc.dart';
import 'package:jdih_bumn/data/datasources/stage/kamus_hukum_datasource.dart';
import 'package:jdih_bumn/presentation/kamus_hukum/body_kamus_page.dart';
import 'package:jdih_bumn/presentation/kamus_hukum/body_kamus_page_two.dart';
import 'package:jdih_bumn/presentation/kamus_hukum/widget/body_kamus_widget.dart';
import 'package:jdih_bumn/presentation/kamus_hukum/widget/kamus_sebelumnya_button_widget.dart';
import 'package:jdih_bumn/presentation/kamus_hukum/widget/title_kamus_widget.dart';
import './widget/kamus_selanjutnya_button_widget_new.dart';
import 'package:jdih_bumn/data/model/response/stage/kamus_hukum_response_model.dart';

class KamusHukumScreen extends StatefulWidget {
  const KamusHukumScreen({super.key});

  @override
  State<KamusHukumScreen> createState() => _KamusHukumScreenState();
}

class _KamusHukumScreenState extends State<KamusHukumScreen> {
  // int pageIndex = 0;
  // late Future<List<Item>> futurePosts;

  final PageController _pageController = PageController();
  List<Item> _items = [];
  int _currentPage = 1;

  Future<void> _loadPage(int pageNumber, {bool append = false}) async {
    try {
      List<Item> fetchedItems =
          await KamusHukumDatasource().getKamusHukumFetchPage(pageNumber);
      if (append) {
        _items.addAll(fetchedItems);
      } else {
        _items = fetchedItems;
      }
      setState(() {});
      print(_items);
    } catch (e) {
      print(e); // Handle the error appropriately
    }
  }

  @override
  void initState() {
    //context.read<GetKamusHukumBloc>().add(DoGetKamusHukumEvent());
    // TODO: implement initState
    super.initState();
    _loadPage(_currentPage);
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;

    PageController page = PageController(
      initialPage: 0,
      viewportFraction: 1,
    );

    final TextEditingController searchController = TextEditingController();
    return Scaffold(
      //  kamus hukum pakai pagination, buat lihat data selanjutnya
      resizeToAvoidBottomInset: false,
      body: SafeArea(
          child: Stack(
        children: [
          Image.asset(
            "assets/images/appbar-bg2.png",
            width: width,
            height: 110.0,
            fit: BoxFit.none,
          ),
          SingleChildScrollView(
            controller: ScrollController(),
            physics: const BouncingScrollPhysics(),
            scrollDirection: Axis.vertical,
            child: SizedBox(
              width: MediaQuery.of(context).size.width,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      BackButton(
                        color: Colors.white,
                        onPressed: () {
                          Navigator.pop(context);
                        },
                      ),
                      SizedBox(
                        width: 0.185 * MediaQuery.of(context).size.width,
                      ),
                      const Expanded(
                        child: SizedBox(
                          height: 90,
                          width: 150,
                          child: Center(
                            child: Text(
                              "Kamus Hukum",
                              style: TextStyle(
                                fontSize: 16.0,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                          ),
                        ),
                      ),
                      Expanded(child: Container())
                    ],
                  ),
                  Container(
                    decoration: const BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.only(
                            topLeft: Radius.circular(24),
                            topRight: Radius.circular(24))),
                    padding: const EdgeInsets.all(20.0),
                    child: Column(
                      children: [
                        const SizedBox(
                          height: 10.0,
                        ),
                        Center(
                          child: Container(
                            height: 45,
                            width: width * 0.9,
                            decoration: const BoxDecoration(
                                borderRadius: BorderRadius.only(
                                    topLeft: Radius.circular(24),
                                    topRight: Radius.circular(24))),
                            child: Material(
                              borderRadius: BorderRadius.circular(10),
                              elevation: 3,
                              child: TextFormField(
                                controller: searchController,
                                onFieldSubmitted: (value) {},
                                decoration: InputDecoration(
                                    suffixIcon: InkWell(
                                      onTap: () {},
                                      child: const Padding(
                                        padding: EdgeInsets.only(left: 6),
                                        child: Icon(
                                          Icons.search,
                                          size: 24.0,
                                          color: Colors.black,
                                        ),
                                      ),
                                    ),
                                    filled: true,
                                    fillColor: Colors.white,
                                    contentPadding: const EdgeInsets.only(
                                        top: 10, left: 20, right: 20),
                                    border: const OutlineInputBorder(
                                        borderRadius: BorderRadius.all(
                                          Radius.circular(7),
                                        ),
                                        borderSide: BorderSide.none),
                                    enabledBorder: const OutlineInputBorder(
                                        borderRadius: BorderRadius.all(
                                            Radius.circular(10)),
                                        borderSide: BorderSide(
                                            color: Colors.black38, width: 1)),
                                    hintText: 'Ketik kata kunci pencarian....',
                                    hintStyle: const TextStyle(
                                      fontWeight: FontWeight.w400,
                                      fontSize: 14.0,
                                    )),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 18.0,
                        ),
                        // pakai pageview nuilder
                        const TitleKamusWidget(),
                        SizedBox(
                            height: 730,
                            width: MediaQuery.of(context).size.width,
                            child: PageView.builder(
                              controller: _pageController,
                              itemCount: _items.length,
                              onPageChanged: (int page) {
                                if (page >= _items.length - 1) {
                                  // Approaching end of loaded items, fetch more
                                  _currentPage++;
                                  _loadPage(_currentPage);
                                }
                              },
                              itemBuilder: (context, index) {
                                //final Item kamus = state.data.items![index];
                                final item = _items[index];

                                return BodyKamusWidget(
                                    istilah: item.istilah.toString(),
                                    definisi: item.definisi.toString());
                              },
                            )),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      )),
      bottomNavigationBar: SizedBox(
        height: 110,
        width: MediaQuery.of(context).size.width,
        child: Column(
          children: [
            const SizedBox(
              height: 10.0,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                KamusSebelumnyaButtonWidget(
                  onTap: _currentPage > 1 ? () => _changePage(-1) : null,
                ),
                KamusSelanjutnyaButtonWidgetNew(
                  onTap: () => _changePage(1),
                )
                // KamusSelanjutnyaButtonWidget(
                //   onTap: () {
                //     page.animateToPage(pageIndex + 1,
                //         duration: const Duration(milliseconds: 200),
                //         curve: Curves.easeOut);
                //     print(pageIndex);
                //     // page.animateToPage(pageIndex--,
                //     //     duration: const Duration(milliseconds: 400),
                //     //     curve: Curves.linearToEaseOut);
                //   },
                // )
              ],
            ),
            const SizedBox(
              height: 10.0,
            ),
            Center(
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text(
                    "Page",
                    style: TextStyle(
                      fontSize: 8.0,
                    ),
                  ),
                  const SizedBox(
                    width: 2.0,
                  ),
                  Container(
                    height: 20,
                    width: 20,
                    decoration:
                        BoxDecoration(border: Border.all(color: Colors.black)),
                    child: Center(
                        child: Text(
                      "$_currentPage",
                      textAlign: TextAlign.center,
                      style: const TextStyle(fontSize: 11),
                    )),
                  ),
                  const SizedBox(
                    width: 2.0,
                  ),
                  const Text(
                    "Of",
                    style: TextStyle(
                      fontSize: 8.0,
                    ),
                  ),
                  const SizedBox(
                    width: 2.0,
                  ),
                  const Text(
                    "10",
                    style: TextStyle(
                      fontSize: 8.0,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _changePage(int direction) {
    final newPage = _currentPage + direction;

    if (direction == 1) {
      // Pre-fetch the next page's data if not already loaded
      if (newPage > _items.length) {
        _loadPage(newPage, append: true);
      }
    }

    setState(() {
      _currentPage = newPage;
    });

    // This moves the PageView to the new page
    _pageController.animateToPage(
      newPage - 1, // because PageView's index starts at 0
      duration: Duration(milliseconds: 300),
      curve: Curves.easeInOut,
    );
  }
}
